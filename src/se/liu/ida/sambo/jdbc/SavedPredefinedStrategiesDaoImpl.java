/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package se.liu.ida.sambo.jdbc;

import se.liu.ida.sambo.dao.*;
import se.liu.ida.sambo.factory.*;
import se.liu.ida.sambo.dto.*;
import se.liu.ida.sambo.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SavedPredefinedStrategiesDaoImpl extends AbstractDAO implements SavedPredefinedStrategiesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, predefinedstrategyid, ontology1, ontology2, matchers, weights, combination, threshold, fmeasure, quality, precision1, recall FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, predefinedstrategyid, ontology1, ontology2, matchers, weights, threshold, fmeasure, quality, precision1, recall ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, predefinedstrategyid = ?, ontology1 = ?, ontology2 = ?, matchers = ?, weights = ?, threshold = ?, fmeasure = ?, quality = ?, precision1 = ?, recall = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column predefinedstrategyid
	 */
	protected static final int COLUMN_PREDEFINEDSTRATEGYID = 2;

	/** 
	 * Index of column ontology1
	 */
	protected static final int COLUMN_ONTOLOGY1 = 3;

	/** 
	 * Index of column ontology2
	 */
	protected static final int COLUMN_ONTOLOGY2 = 4;

	/** 
	 * Index of column matchers
	 */
	protected static final int COLUMN_MATCHERS = 5;

	/** 
	 * Index of column weights
	 */
	protected static final int COLUMN_WEIGHTS = 6;
        
        
        /** 
	 * Index of column combination
	 */
	protected static final int COLUMN_COMBINATION = 7;

	/** 
	 * Index of column threshold
	 */
	protected static final int COLUMN_THRESHOLD = 8;

	/** 
	 * Index of column fmeasure
	 */
	protected static final int COLUMN_FMEASURE = 9;

	/** 
	 * Index of column quality
	 */
	protected static final int COLUMN_QUALITY = 10;

	/** 
	 * Index of column precision1
	 */
	protected static final int COLUMN_PRECISION1 = 11;

	/** 
	 * Index of column recall
	 */
	protected static final int COLUMN_RECALL = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the savedpredefinedstrategies table.
	 */
	public SavedPredefinedStrategiesPk insert(SavedPredefinedStrategies dto) throws SavedPredefinedStrategiesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getPredefinedstrategyid() );
			stmt.setString( index++, dto.getOntology1() );
			stmt.setString( index++, dto.getOntology2() );
			stmt.setString( index++, dto.getMatchers() );
			stmt.setString( index++, dto.getWeights() );
			stmt.setString( index++, dto.getThreshold() );
			stmt.setDouble( index++, dto.getFmeasure() );
			stmt.setDouble( index++, dto.getQuality() );
			stmt.setDouble( index++, dto.getPrecision1() );
			stmt.setDouble( index++, dto.getRecall() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SavedPredefinedStrategiesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the savedpredefinedstrategies table.
	 */
	public void update(SavedPredefinedStrategiesPk pk, SavedPredefinedStrategies dto) throws SavedPredefinedStrategiesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getPredefinedstrategyid() );
			stmt.setString( index++, dto.getOntology1() );
			stmt.setString( index++, dto.getOntology2() );
			stmt.setString( index++, dto.getMatchers() );
			stmt.setString( index++, dto.getWeights() );
                        stmt.setString( index++, dto.getCombination() );
			stmt.setString( index++, dto.getThreshold() );
			stmt.setDouble( index++, dto.getFmeasure() );
			stmt.setDouble( index++, dto.getQuality() );
			stmt.setDouble( index++, dto.getPrecision1() );
			stmt.setDouble( index++, dto.getRecall() );
			stmt.setInt( 12, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SavedPredefinedStrategiesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        
        
        
        
        
        
        
        public void updateStatement(float fmeasure,double quality,float precision,float recall, int id) throws SavedPredefinedStrategiesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			String SQL="UPDATE "+getTableName()+" SET fmeasure="+fmeasure+", quality="+quality+", precision1="+precision+", recall="+recall+" WHERE id="+id;
			stmt = conn.prepareStatement(SQL);
                        
                        stmt.executeUpdate();
			
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SavedPredefinedStrategiesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        
        
        
        
        
        
        
        public void insertStatement(int pid, String ontology1, String ontology2, String matchers, String weights, String combination, String thresholds, SavedPredefinedStrategies dto) throws SavedPredefinedStrategiesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
                ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			String SQL="INSERT INTO "+getTableName()+"(predefinedstrategyid, ontology1, ontology2, matchers, weights, combination, threshold) VALUES('"+pid+"', '"+ontology1+"', '"+ontology2+"', '"+matchers+"', '"+weights+"', '"+combination+"', '"+thresholds+"' )";
			stmt = conn.prepareStatement(SQL);
                        
                        stmt.executeUpdate();
                        
                        
                        // retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			//return dto.createPk();
			
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SavedPredefinedStrategiesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
                        ResourceManager.close(rs);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        

	/** 
	 * Deletes a single row in the savedpredefinedstrategies table.
	 */
	public void delete(SavedPredefinedStrategiesPk pk) throws SavedPredefinedStrategiesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SavedPredefinedStrategiesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the savedpredefinedstrategies table that matches the specified primary-key value.
	 */
	public SavedPredefinedStrategies findByPrimaryKey(SavedPredefinedStrategiesPk pk) throws SavedPredefinedStrategiesDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'id = :id'.
	 */
	public SavedPredefinedStrategies findByPrimaryKey(int id) throws SavedPredefinedStrategiesDaoException
	{
		SavedPredefinedStrategies ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria ''.
	 */
	public SavedPredefinedStrategies[] findAll() throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'id = :id'.
	 */
	public SavedPredefinedStrategies[] findWhereIdEquals(int id) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'predefinedstrategyid = :predefinedstrategyid'.
	 */
	public SavedPredefinedStrategies[] findWherePredefinedstrategyidEquals(int predefinedstrategyid) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE predefinedstrategyid = ? ORDER BY predefinedstrategyid", new Object[] {  new Integer(predefinedstrategyid) } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'ontology1 = :ontology1'.
	 */
	public SavedPredefinedStrategies[] findWhereOntology1Equals(String ontology1) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ontology1 = ? ORDER BY ontology1", new Object[] { ontology1 } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'ontology2 = :ontology2'.
	 */
	public SavedPredefinedStrategies[] findWhereOntology2Equals(String ontology2) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ontology2 = ? ORDER BY ontology2", new Object[] { ontology2 } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'matchers = :matchers'.
	 */
	public SavedPredefinedStrategies[] findWhereMatchersEquals(String matchers) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchers = ? ORDER BY matchers", new Object[] { matchers } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'weights = :weights'.
	 */
	public SavedPredefinedStrategies[] findWhereWeightsEquals(String weights) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weights = ? ORDER BY weights", new Object[] { weights } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'threshold = :threshold'.
	 */
	public SavedPredefinedStrategies[] findWhereThresholdEquals(double threshold) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE threshold = ? ORDER BY threshold", new Object[] {  new Double(threshold) } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'fmeasure = :fmeasure'.
	 */
	public SavedPredefinedStrategies[] findWhereFmeasureEquals(double fmeasure) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fmeasure = ? ORDER BY fmeasure", new Object[] {  new Double(fmeasure) } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'quality = :quality'.
	 */
	public SavedPredefinedStrategies[] findWhereQualityEquals(double quality) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE quality = ? ORDER BY quality", new Object[] {  new Double(quality) } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'precision1 = :precision1'.
	 */
	public SavedPredefinedStrategies[] findWherePrecision1Equals(double precision1) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE precision1 = ? ORDER BY precision1", new Object[] {  new Double(precision1) } );
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the criteria 'recall = :recall'.
	 */
	public SavedPredefinedStrategies[] findWhereRecallEquals(double recall) throws SavedPredefinedStrategiesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE recall = ? ORDER BY recall", new Object[] {  new Double(recall) } );
	}

	/**
	 * Method 'SavedPredefinedStrategiesDaoImpl'
	 * 
	 */
	public SavedPredefinedStrategiesDaoImpl()
	{
	}

	/**
	 * Method 'SavedPredefinedStrategiesDaoImpl'
	 * 
	 * @param userConn
	 */
	public SavedPredefinedStrategiesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "dbsambo.savedpredefinedstrategies";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SavedPredefinedStrategies fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SavedPredefinedStrategies dto = new SavedPredefinedStrategies();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SavedPredefinedStrategies[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SavedPredefinedStrategies dto = new SavedPredefinedStrategies();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SavedPredefinedStrategies ret[] = new SavedPredefinedStrategies[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SavedPredefinedStrategies dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setPredefinedstrategyid( rs.getInt( COLUMN_PREDEFINEDSTRATEGYID ) );
		dto.setOntology1( rs.getString( COLUMN_ONTOLOGY1 ) );
		dto.setOntology2( rs.getString( COLUMN_ONTOLOGY2 ) );
		dto.setMatchers( rs.getString( COLUMN_MATCHERS ) );
		dto.setWeights( rs.getString( COLUMN_WEIGHTS ) );
                dto.setCombination( rs.getString( COLUMN_COMBINATION ) );
		dto.setThreshold( rs.getString( COLUMN_THRESHOLD ) );
		dto.setFmeasure( rs.getDouble( COLUMN_FMEASURE ) );
		dto.setQuality( rs.getDouble( COLUMN_QUALITY ) );
		dto.setPrecision1( rs.getDouble( COLUMN_PRECISION1 ) );
		dto.setRecall( rs.getDouble( COLUMN_RECALL ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SavedPredefinedStrategies dto)
	{
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the specified arbitrary SQL statement
	 */
	public SavedPredefinedStrategies[] findByDynamicSelect(String sql, Object[] sqlParams) throws SavedPredefinedStrategiesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SavedPredefinedStrategiesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the savedpredefinedstrategies table that match the specified arbitrary SQL statement
	 */
	public SavedPredefinedStrategies[] findByDynamicWhere(String sql, Object[] sqlParams) throws SavedPredefinedStrategiesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SavedPredefinedStrategiesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
