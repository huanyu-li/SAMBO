/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package se.liu.ida.sambo.jdbc;

import se.liu.ida.sambo.dao.*;
import se.liu.ida.sambo.factory.*;
import java.util.Date;
import se.liu.ida.sambo.dto.*;
import se.liu.ida.sambo.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class UserSessionsDaoImpl extends AbstractDAO implements UserSessionsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id, userid, email, ontology1, ontology2, color1, color2, matchername0, matchervalue0, weightvalue0, matchername1, matchervalue1, weightvalue1, matchername2, matchervalue2, weightvalue2, matchername3, matchervalue3, weightvalue3, matchername4, matchervalue4, weightvalue4, matchername5, matchervalue5, weightvalue5, matchername6, matchervalue6, weightvalue6, matchername7, matchervalue7, weightvalue7, matchername8, matchervalue8, weightvalue8, matchername9, matchervalue9, weightvalue9, thresholdvalue, session_type, sid, step, is_finalized, user_xml, user_historylist_xml, user_relations_historylist_xml, user_suggestions_list_xml, user_temp_xml, creation_time, last_accessed_time FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id, userid, email, ontology1, ontology2, color1, color2, matchername0, matchervalue0, weightvalue0, matchername1, matchervalue1, weightvalue1, matchername2, matchervalue2, weightvalue2, matchername3, matchervalue3, weightvalue3, matchername4, matchervalue4, weightvalue4, matchername5, matchervalue5, weightvalue5, matchername6, matchervalue6, weightvalue6, matchername7, matchervalue7, weightvalue7, matchername8, matchervalue8, weightvalue8, matchername9, matchervalue9, weightvalue9, thresholdvalue, session_type, sid, step, is_finalized, user_xml, user_historylist_xml, user_relations_historylist_xml, user_suggestions_list_xml, user_temp_xml, creation_time, last_accessed_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id = ?, userid = ?, email = ?, ontology1 = ?, ontology2 = ?, color1 = ?, color2 = ?, matchername0 = ?, matchervalue0 = ?, weightvalue0 = ?, matchername1 = ?, matchervalue1 = ?, weightvalue1 = ?, matchername2 = ?, matchervalue2 = ?, weightvalue2 = ?, matchername3 = ?, matchervalue3 = ?, weightvalue3 = ?, matchername4 = ?, matchervalue4 = ?, weightvalue4 = ?, matchername5 = ?, matchervalue5 = ?, weightvalue5 = ?, matchername6 = ?, matchervalue6 = ?, weightvalue6 = ?, matchername7 = ?, matchervalue7 = ?, weightvalue7 = ?, matchername8 = ?, matchervalue8 = ?, weightvalue8 = ?, matchername9 = ?, matchervalue9 = ?, weightvalue9 = ?, thresholdvalue = ?, session_type = ?, sid = ?, step = ?, is_finalized = ?, user_xml = ?, user_historylist_xml = ?, user_relations_historylist_xml = ?, user_suggestions_list_xml = ?, user_temp_xml = ?, creation_time = ?, last_accessed_time = ? WHERE id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id = ?";

	/** 
	 * Index of column id
	 */
	protected static final int COLUMN_ID = 1;

	/** 
	 * Index of column userid
	 */
	protected static final int COLUMN_USERID = 2;

	/** 
	 * Index of column email
	 */
	protected static final int COLUMN_EMAIL = 3;

	/** 
	 * Index of column ontology1
	 */
	protected static final int COLUMN_ONTOLOGY1 = 4;

	/** 
	 * Index of column ontology2
	 */
	protected static final int COLUMN_ONTOLOGY2 = 5;

	/** 
	 * Index of column color1
	 */
	protected static final int COLUMN_COLOR1 = 6;

	/** 
	 * Index of column color2
	 */
	protected static final int COLUMN_COLOR2 = 7;

	/** 
	 * Index of column matchername0
	 */
	protected static final int COLUMN_MATCHERNAME0 = 8;

	/** 
	 * Index of column matchervalue0
	 */
	protected static final int COLUMN_MATCHERVALUE0 = 9;

	/** 
	 * Index of column weightvalue0
	 */
	protected static final int COLUMN_WEIGHTVALUE0 = 10;

	/** 
	 * Index of column matchername1
	 */
	protected static final int COLUMN_MATCHERNAME1 = 11;

	/** 
	 * Index of column matchervalue1
	 */
	protected static final int COLUMN_MATCHERVALUE1 = 12;

	/** 
	 * Index of column weightvalue1
	 */
	protected static final int COLUMN_WEIGHTVALUE1 = 13;

	/** 
	 * Index of column matchername2
	 */
	protected static final int COLUMN_MATCHERNAME2 = 14;

	/** 
	 * Index of column matchervalue2
	 */
	protected static final int COLUMN_MATCHERVALUE2 = 15;

	/** 
	 * Index of column weightvalue2
	 */
	protected static final int COLUMN_WEIGHTVALUE2 = 16;

	/** 
	 * Index of column matchername3
	 */
	protected static final int COLUMN_MATCHERNAME3 = 17;

	/** 
	 * Index of column matchervalue3
	 */
	protected static final int COLUMN_MATCHERVALUE3 = 18;

	/** 
	 * Index of column weightvalue3
	 */
	protected static final int COLUMN_WEIGHTVALUE3 = 19;

	/** 
	 * Index of column matchername4
	 */
	protected static final int COLUMN_MATCHERNAME4 = 20;

	/** 
	 * Index of column matchervalue4
	 */
	protected static final int COLUMN_MATCHERVALUE4 = 21;

	/** 
	 * Index of column weightvalue4
	 */
	protected static final int COLUMN_WEIGHTVALUE4 = 22;

	/** 
	 * Index of column matchername5
	 */
	protected static final int COLUMN_MATCHERNAME5 = 23;

	/** 
	 * Index of column matchervalue5
	 */
	protected static final int COLUMN_MATCHERVALUE5 = 24;

	/** 
	 * Index of column weightvalue5
	 */
	protected static final int COLUMN_WEIGHTVALUE5 = 25;

	/** 
	 * Index of column matchername6
	 */
	protected static final int COLUMN_MATCHERNAME6 = 26;

	/** 
	 * Index of column matchervalue6
	 */
	protected static final int COLUMN_MATCHERVALUE6 = 27;

	/** 
	 * Index of column weightvalue6
	 */
	protected static final int COLUMN_WEIGHTVALUE6 = 28;

	/** 
	 * Index of column matchername7
	 */
	protected static final int COLUMN_MATCHERNAME7 = 29;

	/** 
	 * Index of column matchervalue7
	 */
	protected static final int COLUMN_MATCHERVALUE7 = 30;

	/** 
	 * Index of column weightvalue7
	 */
	protected static final int COLUMN_WEIGHTVALUE7 = 31;

	/** 
	 * Index of column matchername8
	 */
	protected static final int COLUMN_MATCHERNAME8 = 32;

	/** 
	 * Index of column matchervalue8
	 */
	protected static final int COLUMN_MATCHERVALUE8 = 33;

	/** 
	 * Index of column weightvalue8
	 */
	protected static final int COLUMN_WEIGHTVALUE8 = 34;

	/** 
	 * Index of column matchername9
	 */
	protected static final int COLUMN_MATCHERNAME9 = 35;

	/** 
	 * Index of column matchervalue9
	 */
	protected static final int COLUMN_MATCHERVALUE9 = 36;

	/** 
	 * Index of column weightvalue9
	 */
	protected static final int COLUMN_WEIGHTVALUE9 = 37;

	/** 
	 * Index of column thresholdvalue
	 */
	protected static final int COLUMN_THRESHOLDVALUE = 38;

	/** 
	 * Index of column session_type
	 */
	protected static final int COLUMN_SESSION_TYPE = 39;

	/** 
	 * Index of column sid
	 */
	protected static final int COLUMN_SID = 40;

	/** 
	 * Index of column step
	 */
	protected static final int COLUMN_STEP = 41;

	/** 
	 * Index of column is_finalized
	 */
	protected static final int COLUMN_IS_FINALIZED = 42;

	/** 
	 * Index of column user_xml
	 */
	protected static final int COLUMN_USER_XML = 43;

	/** 
	 * Index of column user_historylist_xml
	 */
	protected static final int COLUMN_USER_HISTORYLIST_XML = 44;

	/** 
	 * Index of column user_relations_historylist_xml
	 */
	protected static final int COLUMN_USER_RELATIONS_HISTORYLIST_XML = 45;

	/** 
	 * Index of column user_suggestions_list_xml
	 */
	protected static final int COLUMN_USER_SUGGESTIONS_LIST_XML = 46;

	/** 
	 * Index of column user_temp_xml
	 */
	protected static final int COLUMN_USER_TEMP_XML = 47;

	/** 
	 * Index of column creation_time
	 */
	protected static final int COLUMN_CREATION_TIME = 48;

	/** 
	 * Index of column last_accessed_time
	 */
	protected static final int COLUMN_LAST_ACCESSED_TIME = 49;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 49;

	/** 
	 * Index of primary-key column id
	 */
	protected static final int PK_COLUMN_ID = 1;

	/** 
	 * Inserts a new row in the usersessions table.
	 */
	public UserSessionsPk insert(UserSessions dto) throws UserSessionsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getUserid() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getOntology1() );
			stmt.setString( index++, dto.getOntology2() );
			stmt.setString( index++, dto.getColor1() );
			stmt.setString( index++, dto.getColor2() );
			stmt.setString( index++, dto.getMatchername0() );
			stmt.setString( index++, dto.getMatchervalue0() );
			if (dto.isWeightvalue0Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue0() );
			}
		
			stmt.setString( index++, dto.getMatchername1() );
			stmt.setString( index++, dto.getMatchervalue1() );
			if (dto.isWeightvalue1Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue1() );
			}
		
			stmt.setString( index++, dto.getMatchername2() );
			stmt.setString( index++, dto.getMatchervalue2() );
			if (dto.isWeightvalue2Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue2() );
			}
		
			stmt.setString( index++, dto.getMatchername3() );
			stmt.setString( index++, dto.getMatchervalue3() );
			if (dto.isWeightvalue3Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue3() );
			}
		
			stmt.setString( index++, dto.getMatchername4() );
			stmt.setString( index++, dto.getMatchervalue4() );
			if (dto.isWeightvalue4Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue4() );
			}
		
			stmt.setString( index++, dto.getMatchername5() );
			stmt.setString( index++, dto.getMatchervalue5() );
			if (dto.isWeightvalue5Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue5() );
			}
		
			stmt.setString( index++, dto.getMatchername6() );
			stmt.setString( index++, dto.getMatchervalue6() );
			if (dto.isWeightvalue6Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue6() );
			}
		
			stmt.setString( index++, dto.getMatchername7() );
			stmt.setString( index++, dto.getMatchervalue7() );
			if (dto.isWeightvalue7Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue7() );
			}
		
			stmt.setString( index++, dto.getMatchername8() );
			stmt.setString( index++, dto.getMatchervalue8() );
			if (dto.isWeightvalue8Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue8() );
			}
		
			stmt.setString( index++, dto.getMatchername9() );
			stmt.setString( index++, dto.getMatchervalue9() );
			if (dto.isWeightvalue9Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue9() );
			}
		
			stmt.setDouble( index++, dto.getThresholdvalue() );
			stmt.setString( index++, dto.getSessionType() );
			stmt.setString( index++, dto.getSid() );
			stmt.setShort( index++, dto.getStep() );
			stmt.setInt( index++, dto.getIsFinalized() );
			stmt.setString( index++, dto.getUserXml() );
			stmt.setString( index++, dto.getUserHistorylistXml() );
			stmt.setString( index++, dto.getUserRelationsHistorylistXml() );
			stmt.setString( index++, dto.getUserSuggestionsListXml() );
			stmt.setString( index++, dto.getUserTempXml() );
			stmt.setTimestamp(index++, dto.getCreationTime()==null ? null : new java.sql.Timestamp( dto.getCreationTime().getTime() ) );
			stmt.setTimestamp(index++, dto.getLastAccessedTime()==null ? null : new java.sql.Timestamp( dto.getLastAccessedTime().getTime() ) );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setId( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserSessionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the usersessions table.
	 */
	public void update(UserSessionsPk pk, UserSessions dto) throws UserSessionsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getId() );
			stmt.setInt( index++, dto.getUserid() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getOntology1() );
			stmt.setString( index++, dto.getOntology2() );
			stmt.setString( index++, dto.getColor1() );
			stmt.setString( index++, dto.getColor2() );
			stmt.setString( index++, dto.getMatchername0() );
			stmt.setString( index++, dto.getMatchervalue0() );
			if (dto.isWeightvalue0Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue0() );
			}
		
			stmt.setString( index++, dto.getMatchername1() );
			stmt.setString( index++, dto.getMatchervalue1() );
			if (dto.isWeightvalue1Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue1() );
			}
		
			stmt.setString( index++, dto.getMatchername2() );
			stmt.setString( index++, dto.getMatchervalue2() );
			if (dto.isWeightvalue2Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue2() );
			}
		
			stmt.setString( index++, dto.getMatchername3() );
			stmt.setString( index++, dto.getMatchervalue3() );
			if (dto.isWeightvalue3Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue3() );
			}
		
			stmt.setString( index++, dto.getMatchername4() );
			stmt.setString( index++, dto.getMatchervalue4() );
			if (dto.isWeightvalue4Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue4() );
			}
		
			stmt.setString( index++, dto.getMatchername5() );
			stmt.setString( index++, dto.getMatchervalue5() );
			if (dto.isWeightvalue5Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue5() );
			}
		
			stmt.setString( index++, dto.getMatchername6() );
			stmt.setString( index++, dto.getMatchervalue6() );
			if (dto.isWeightvalue6Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue6() );
			}
		
			stmt.setString( index++, dto.getMatchername7() );
			stmt.setString( index++, dto.getMatchervalue7() );
			if (dto.isWeightvalue7Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue7() );
			}
		
			stmt.setString( index++, dto.getMatchername8() );
			stmt.setString( index++, dto.getMatchervalue8() );
			if (dto.isWeightvalue8Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue8() );
			}
		
			stmt.setString( index++, dto.getMatchername9() );
			stmt.setString( index++, dto.getMatchervalue9() );
			if (dto.isWeightvalue9Null()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getWeightvalue9() );
			}
		
			stmt.setDouble( index++, dto.getThresholdvalue() );
			stmt.setString( index++, dto.getSessionType() );
			stmt.setString( index++, dto.getSid() );
			stmt.setShort( index++, dto.getStep() );
			stmt.setInt( index++, dto.getIsFinalized() );
			stmt.setString( index++, dto.getUserXml() );
			stmt.setString( index++, dto.getUserHistorylistXml() );
			stmt.setString( index++, dto.getUserRelationsHistorylistXml() );
			stmt.setString( index++, dto.getUserSuggestionsListXml() );
			stmt.setString( index++, dto.getUserTempXml() );
			stmt.setTimestamp(index++, dto.getCreationTime()==null ? null : new java.sql.Timestamp( dto.getCreationTime().getTime() ) );
			stmt.setTimestamp(index++, dto.getLastAccessedTime()==null ? null : new java.sql.Timestamp( dto.getLastAccessedTime().getTime() ) );
			stmt.setInt( 50, pk.getId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserSessionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the usersessions table.
	 */
	public void delete(UserSessionsPk pk) throws UserSessionsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserSessionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the usersessions table that matches the specified primary-key value.
	 */
	public UserSessions findByPrimaryKey(UserSessionsPk pk) throws UserSessionsDaoException
	{
		return findByPrimaryKey( pk.getId() );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'id = :id'.
	 */
	public UserSessions findByPrimaryKey(int id) throws UserSessionsDaoException
	{
		UserSessions ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id = ?", new Object[] {  new Integer(id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria ''.
	 */
	public UserSessions[] findAll() throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id", null );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'id = :id'.
	 */
	public UserSessions[] findWhereIdEquals(int id) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id = ? ORDER BY id", new Object[] {  new Integer(id) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'userid = :userid'.
	 */
	public UserSessions[] findWhereUseridEquals(int userid) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE userid = ? ORDER BY userid", new Object[] {  new Integer(userid) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'email = :email'.
	 */
	public UserSessions[] findWhereEmailEquals(String email) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email = ? ORDER BY email", new Object[] { email } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'ontology1 = :ontology1'.
	 */
	public UserSessions[] findWhereOntology1Equals(String ontology1) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ontology1 = ? ORDER BY ontology1", new Object[] { ontology1 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'ontology2 = :ontology2'.
	 */
	public UserSessions[] findWhereOntology2Equals(String ontology2) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ontology2 = ? ORDER BY ontology2", new Object[] { ontology2 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'color1 = :color1'.
	 */
	public UserSessions[] findWhereColor1Equals(String color1) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE color1 = ? ORDER BY color1", new Object[] { color1 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'color2 = :color2'.
	 */
	public UserSessions[] findWhereColor2Equals(String color2) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE color2 = ? ORDER BY color2", new Object[] { color2 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername0 = :matchername0'.
	 */
	public UserSessions[] findWhereMatchername0Equals(String matchername0) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername0 = ? ORDER BY matchername0", new Object[] { matchername0 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue0 = :matchervalue0'.
	 */
	public UserSessions[] findWhereMatchervalue0Equals(String matchervalue0) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue0 = ? ORDER BY matchervalue0", new Object[] { matchervalue0 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue0 = :weightvalue0'.
	 */
	public UserSessions[] findWhereWeightvalue0Equals(double weightvalue0) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue0 = ? ORDER BY weightvalue0", new Object[] {  new Double(weightvalue0) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername1 = :matchername1'.
	 */
	public UserSessions[] findWhereMatchername1Equals(String matchername1) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername1 = ? ORDER BY matchername1", new Object[] { matchername1 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue1 = :matchervalue1'.
	 */
	public UserSessions[] findWhereMatchervalue1Equals(String matchervalue1) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue1 = ? ORDER BY matchervalue1", new Object[] { matchervalue1 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue1 = :weightvalue1'.
	 */
	public UserSessions[] findWhereWeightvalue1Equals(double weightvalue1) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue1 = ? ORDER BY weightvalue1", new Object[] {  new Double(weightvalue1) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername2 = :matchername2'.
	 */
	public UserSessions[] findWhereMatchername2Equals(String matchername2) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername2 = ? ORDER BY matchername2", new Object[] { matchername2 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue2 = :matchervalue2'.
	 */
	public UserSessions[] findWhereMatchervalue2Equals(String matchervalue2) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue2 = ? ORDER BY matchervalue2", new Object[] { matchervalue2 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue2 = :weightvalue2'.
	 */
	public UserSessions[] findWhereWeightvalue2Equals(double weightvalue2) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue2 = ? ORDER BY weightvalue2", new Object[] {  new Double(weightvalue2) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername3 = :matchername3'.
	 */
	public UserSessions[] findWhereMatchername3Equals(String matchername3) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername3 = ? ORDER BY matchername3", new Object[] { matchername3 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue3 = :matchervalue3'.
	 */
	public UserSessions[] findWhereMatchervalue3Equals(String matchervalue3) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue3 = ? ORDER BY matchervalue3", new Object[] { matchervalue3 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue3 = :weightvalue3'.
	 */
	public UserSessions[] findWhereWeightvalue3Equals(double weightvalue3) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue3 = ? ORDER BY weightvalue3", new Object[] {  new Double(weightvalue3) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername4 = :matchername4'.
	 */
	public UserSessions[] findWhereMatchername4Equals(String matchername4) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername4 = ? ORDER BY matchername4", new Object[] { matchername4 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue4 = :matchervalue4'.
	 */
	public UserSessions[] findWhereMatchervalue4Equals(String matchervalue4) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue4 = ? ORDER BY matchervalue4", new Object[] { matchervalue4 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue4 = :weightvalue4'.
	 */
	public UserSessions[] findWhereWeightvalue4Equals(double weightvalue4) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue4 = ? ORDER BY weightvalue4", new Object[] {  new Double(weightvalue4) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername5 = :matchername5'.
	 */
	public UserSessions[] findWhereMatchername5Equals(String matchername5) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername5 = ? ORDER BY matchername5", new Object[] { matchername5 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue5 = :matchervalue5'.
	 */
	public UserSessions[] findWhereMatchervalue5Equals(String matchervalue5) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue5 = ? ORDER BY matchervalue5", new Object[] { matchervalue5 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue5 = :weightvalue5'.
	 */
	public UserSessions[] findWhereWeightvalue5Equals(double weightvalue5) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue5 = ? ORDER BY weightvalue5", new Object[] {  new Double(weightvalue5) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername6 = :matchername6'.
	 */
	public UserSessions[] findWhereMatchername6Equals(String matchername6) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername6 = ? ORDER BY matchername6", new Object[] { matchername6 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue6 = :matchervalue6'.
	 */
	public UserSessions[] findWhereMatchervalue6Equals(String matchervalue6) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue6 = ? ORDER BY matchervalue6", new Object[] { matchervalue6 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue6 = :weightvalue6'.
	 */
	public UserSessions[] findWhereWeightvalue6Equals(double weightvalue6) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue6 = ? ORDER BY weightvalue6", new Object[] {  new Double(weightvalue6) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername7 = :matchername7'.
	 */
	public UserSessions[] findWhereMatchername7Equals(String matchername7) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername7 = ? ORDER BY matchername7", new Object[] { matchername7 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue7 = :matchervalue7'.
	 */
	public UserSessions[] findWhereMatchervalue7Equals(String matchervalue7) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue7 = ? ORDER BY matchervalue7", new Object[] { matchervalue7 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue7 = :weightvalue7'.
	 */
	public UserSessions[] findWhereWeightvalue7Equals(double weightvalue7) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue7 = ? ORDER BY weightvalue7", new Object[] {  new Double(weightvalue7) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername8 = :matchername8'.
	 */
	public UserSessions[] findWhereMatchername8Equals(String matchername8) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername8 = ? ORDER BY matchername8", new Object[] { matchername8 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue8 = :matchervalue8'.
	 */
	public UserSessions[] findWhereMatchervalue8Equals(String matchervalue8) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue8 = ? ORDER BY matchervalue8", new Object[] { matchervalue8 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue8 = :weightvalue8'.
	 */
	public UserSessions[] findWhereWeightvalue8Equals(double weightvalue8) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue8 = ? ORDER BY weightvalue8", new Object[] {  new Double(weightvalue8) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchername9 = :matchername9'.
	 */
	public UserSessions[] findWhereMatchername9Equals(String matchername9) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchername9 = ? ORDER BY matchername9", new Object[] { matchername9 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'matchervalue9 = :matchervalue9'.
	 */
	public UserSessions[] findWhereMatchervalue9Equals(String matchervalue9) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE matchervalue9 = ? ORDER BY matchervalue9", new Object[] { matchervalue9 } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'weightvalue9 = :weightvalue9'.
	 */
	public UserSessions[] findWhereWeightvalue9Equals(double weightvalue9) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE weightvalue9 = ? ORDER BY weightvalue9", new Object[] {  new Double(weightvalue9) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'thresholdvalue = :thresholdvalue'.
	 */
	public UserSessions[] findWhereThresholdvalueEquals(double thresholdvalue) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE thresholdvalue = ? ORDER BY thresholdvalue", new Object[] {  new Double(thresholdvalue) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'session_type = :sessionType'.
	 */
	public UserSessions[] findWhereSessionTypeEquals(String sessionType) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE session_type = ? ORDER BY session_type", new Object[] { sessionType } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'sid = :sid'.
	 */
	public UserSessions[] findWhereSidEquals(String sid) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sid = ? ORDER BY sid", new Object[] { sid } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'step = :step'.
	 */
	public UserSessions[] findWhereStepEquals(short step) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE step = ? ORDER BY step", new Object[] {  new Short(step) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'is_finalized = :isFinalized'.
	 */
	public UserSessions[] findWhereIsFinalizedEquals(int isFinalized) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_finalized = ? ORDER BY is_finalized", new Object[] {  new Integer(isFinalized) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'user_xml = :userXml'.
	 */
	public UserSessions[] findWhereUserXmlEquals(String userXml) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_xml = ? ORDER BY user_xml", new Object[] { userXml } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'user_historylist_xml = :userHistorylistXml'.
	 */
	public UserSessions[] findWhereUserHistorylistXmlEquals(String userHistorylistXml) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_historylist_xml = ? ORDER BY user_historylist_xml", new Object[] { userHistorylistXml } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'user_relations_historylist_xml = :userRelationsHistorylistXml'.
	 */
	public UserSessions[] findWhereUserRelationsHistorylistXmlEquals(String userRelationsHistorylistXml) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_relations_historylist_xml = ? ORDER BY user_relations_historylist_xml", new Object[] { userRelationsHistorylistXml } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'user_suggestions_list_xml = :userSuggestionsListXml'.
	 */
	public UserSessions[] findWhereUserSuggestionsListXmlEquals(String userSuggestionsListXml) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_suggestions_list_xml = ? ORDER BY user_suggestions_list_xml", new Object[] { userSuggestionsListXml } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'user_temp_xml = :userTempXml'.
	 */
	public UserSessions[] findWhereUserTempXmlEquals(String userTempXml) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_temp_xml = ? ORDER BY user_temp_xml", new Object[] { userTempXml } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'creation_time = :creationTime'.
	 */
	public UserSessions[] findWhereCreationTimeEquals(Date creationTime) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE creation_time = ? ORDER BY creation_time", new Object[] { creationTime==null ? null : new java.sql.Timestamp( creationTime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the usersessions table that match the criteria 'last_accessed_time = :lastAccessedTime'.
	 */
	public UserSessions[] findWhereLastAccessedTimeEquals(Date lastAccessedTime) throws UserSessionsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE last_accessed_time = ? ORDER BY last_accessed_time", new Object[] { lastAccessedTime==null ? null : new java.sql.Timestamp( lastAccessedTime.getTime() ) } );
	}

	/**
	 * Method 'UserSessionsDaoImpl'
	 * 
	 */
	public UserSessionsDaoImpl()
	{
	}

	/**
	 * Method 'UserSessionsDaoImpl'
	 * 
	 * @param userConn
	 */
	public UserSessionsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "dbsambo.usersessions";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected UserSessions fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			UserSessions dto = new UserSessions();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected UserSessions[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			UserSessions dto = new UserSessions();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		UserSessions ret[] = new UserSessions[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(UserSessions dto, ResultSet rs) throws SQLException
	{
		dto.setId( rs.getInt( COLUMN_ID ) );
		dto.setUserid( rs.getInt( COLUMN_USERID ) );
		dto.setEmail( rs.getString( COLUMN_EMAIL ) );
		dto.setOntology1( rs.getString( COLUMN_ONTOLOGY1 ) );
		dto.setOntology2( rs.getString( COLUMN_ONTOLOGY2 ) );
		dto.setColor1( rs.getString( COLUMN_COLOR1 ) );
		dto.setColor2( rs.getString( COLUMN_COLOR2 ) );
		dto.setMatchername0( rs.getString( COLUMN_MATCHERNAME0 ) );
		dto.setMatchervalue0( rs.getString( COLUMN_MATCHERVALUE0 ) );
		dto.setWeightvalue0( rs.getDouble( COLUMN_WEIGHTVALUE0 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue0Null( true );
		}
		
		dto.setMatchername1( rs.getString( COLUMN_MATCHERNAME1 ) );
		dto.setMatchervalue1( rs.getString( COLUMN_MATCHERVALUE1 ) );
		dto.setWeightvalue1( rs.getDouble( COLUMN_WEIGHTVALUE1 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue1Null( true );
		}
		
		dto.setMatchername2( rs.getString( COLUMN_MATCHERNAME2 ) );
		dto.setMatchervalue2( rs.getString( COLUMN_MATCHERVALUE2 ) );
		dto.setWeightvalue2( rs.getDouble( COLUMN_WEIGHTVALUE2 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue2Null( true );
		}
		
		dto.setMatchername3( rs.getString( COLUMN_MATCHERNAME3 ) );
		dto.setMatchervalue3( rs.getString( COLUMN_MATCHERVALUE3 ) );
		dto.setWeightvalue3( rs.getDouble( COLUMN_WEIGHTVALUE3 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue3Null( true );
		}
		
		dto.setMatchername4( rs.getString( COLUMN_MATCHERNAME4 ) );
		dto.setMatchervalue4( rs.getString( COLUMN_MATCHERVALUE4 ) );
		dto.setWeightvalue4( rs.getDouble( COLUMN_WEIGHTVALUE4 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue4Null( true );
		}
		
		dto.setMatchername5( rs.getString( COLUMN_MATCHERNAME5 ) );
		dto.setMatchervalue5( rs.getString( COLUMN_MATCHERVALUE5 ) );
		dto.setWeightvalue5( rs.getDouble( COLUMN_WEIGHTVALUE5 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue5Null( true );
		}
		
		dto.setMatchername6( rs.getString( COLUMN_MATCHERNAME6 ) );
		dto.setMatchervalue6( rs.getString( COLUMN_MATCHERVALUE6 ) );
		dto.setWeightvalue6( rs.getDouble( COLUMN_WEIGHTVALUE6 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue6Null( true );
		}
		
		dto.setMatchername7( rs.getString( COLUMN_MATCHERNAME7 ) );
		dto.setMatchervalue7( rs.getString( COLUMN_MATCHERVALUE7 ) );
		dto.setWeightvalue7( rs.getDouble( COLUMN_WEIGHTVALUE7 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue7Null( true );
		}
		
		dto.setMatchername8( rs.getString( COLUMN_MATCHERNAME8 ) );
		dto.setMatchervalue8( rs.getString( COLUMN_MATCHERVALUE8 ) );
		dto.setWeightvalue8( rs.getDouble( COLUMN_WEIGHTVALUE8 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue8Null( true );
		}
		
		dto.setMatchername9( rs.getString( COLUMN_MATCHERNAME9 ) );
		dto.setMatchervalue9( rs.getString( COLUMN_MATCHERVALUE9 ) );
		dto.setWeightvalue9( rs.getDouble( COLUMN_WEIGHTVALUE9 ) );
		if (rs.wasNull()) {
			dto.setWeightvalue9Null( true );
		}
		
		dto.setThresholdvalue( rs.getDouble( COLUMN_THRESHOLDVALUE ) );
		dto.setSessionType( rs.getString( COLUMN_SESSION_TYPE ) );
		dto.setSid( rs.getString( COLUMN_SID ) );
		dto.setStep( rs.getShort( COLUMN_STEP ) );
		dto.setIsFinalized( rs.getInt( COLUMN_IS_FINALIZED ) );
		dto.setUserXml( rs.getString( COLUMN_USER_XML ) );
		dto.setUserHistorylistXml( rs.getString( COLUMN_USER_HISTORYLIST_XML ) );
		dto.setUserRelationsHistorylistXml( rs.getString( COLUMN_USER_RELATIONS_HISTORYLIST_XML ) );
		dto.setUserSuggestionsListXml( rs.getString( COLUMN_USER_SUGGESTIONS_LIST_XML ) );
		dto.setUserTempXml( rs.getString( COLUMN_USER_TEMP_XML ) );
		dto.setCreationTime( rs.getTimestamp(COLUMN_CREATION_TIME ) );
		dto.setLastAccessedTime( rs.getTimestamp(COLUMN_LAST_ACCESSED_TIME ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(UserSessions dto)
	{
	}

	/** 
	 * Returns all rows from the usersessions table that match the specified arbitrary SQL statement
	 */
	public UserSessions[] findByDynamicSelect(String sql, Object[] sqlParams) throws UserSessionsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserSessionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the usersessions table that match the specified arbitrary SQL statement
	 */
	public UserSessions[] findByDynamicWhere(String sql, Object[] sqlParams) throws UserSessionsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UserSessionsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
