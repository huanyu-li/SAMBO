/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package se.liu.ida.sambo.dao;

import se.liu.ida.sambo.dto.*;
import se.liu.ida.sambo.exceptions.*;

public interface PredefinedStrategiesDao
{
	/** 
	 * Inserts a new row in the predefinedstrategies table.
	 */
	public PredefinedStrategiesPk insert(PredefinedStrategies dto) throws PredefinedStrategiesDaoException;

	/** 
	 * Updates a single row in the predefinedstrategies table.
	 */
	public void update(PredefinedStrategiesPk pk, PredefinedStrategies dto) throws PredefinedStrategiesDaoException;

	/** 
	 * Deletes a single row in the predefinedstrategies table.
	 */
	public void delete(PredefinedStrategiesPk pk) throws PredefinedStrategiesDaoException;

	/** 
	 * Returns the rows from the predefinedstrategies table that matches the specified primary-key value.
	 */
	public PredefinedStrategies findByPrimaryKey(PredefinedStrategiesPk pk) throws PredefinedStrategiesDaoException;

	/** 
	 * Returns all rows from the predefinedstrategies table that match the criteria 'id = :id'.
	 */
	public PredefinedStrategies findByPrimaryKey(int id) throws PredefinedStrategiesDaoException;

	/** 
	 * Returns all rows from the predefinedstrategies table that match the criteria ''.
	 */
	public PredefinedStrategies[] findAll() throws PredefinedStrategiesDaoException;

	/** 
	 * Returns all rows from the predefinedstrategies table that match the criteria 'id = :id'.
	 */
	public PredefinedStrategies[] findWhereIdEquals(int id) throws PredefinedStrategiesDaoException;

	/** 
	 * Returns all rows from the predefinedstrategies table that match the criteria 'matchers = :matchers'.
	 */
	public PredefinedStrategies[] findWhereMatchersEquals(String matchers) throws PredefinedStrategiesDaoException;

	/** 
	 * Returns all rows from the predefinedstrategies table that match the criteria 'submatchers = :submatchers'.
	 */
	public PredefinedStrategies[] findWhereSubmatchersEquals(String submatchers) throws PredefinedStrategiesDaoException;

	/** 
	 * Returns all rows from the predefinedstrategies table that match the criteria 'weights = :weights'.
	 */
	public PredefinedStrategies[] findWhereWeightsEquals(String weights) throws PredefinedStrategiesDaoException;

	/** 
	 * Returns all rows from the predefinedstrategies table that match the criteria 'subweights = :subweights'.
	 */
	public PredefinedStrategies[] findWhereSubweightsEquals(String subweights) throws PredefinedStrategiesDaoException;

	/** 
	 * Returns all rows from the predefinedstrategies table that match the criteria 'threshold = :threshold'.
	 */
	public PredefinedStrategies[] findWhereThresholdEquals(float threshold) throws PredefinedStrategiesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the predefinedstrategies table that match the specified arbitrary SQL statement
	 */
	public PredefinedStrategies[] findByDynamicSelect(String sql, Object[] sqlParams) throws PredefinedStrategiesDaoException;

	/** 
	 * Returns all rows from the predefinedstrategies table that match the specified arbitrary SQL statement
	 */
	public PredefinedStrategies[] findByDynamicWhere(String sql, Object[] sqlParams) throws PredefinedStrategiesDaoException;

}
