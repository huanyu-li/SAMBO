/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package se.liu.ida.sambo.dao;

import se.liu.ida.sambo.dto.*;
import se.liu.ida.sambo.exceptions.*;

public interface SavedPredefinedStrategiesSuggestionsDao
{
	/** 
	 * Inserts a new row in the savedpredefinedstrategiessuggestions table.
	 */
	public SavedPredefinedStrategiesSuggestionsPk insert(SavedPredefinedStrategiesSuggestions dto) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Updates a single row in the savedpredefinedstrategiessuggestions table.
	 */
	public void update(SavedPredefinedStrategiesSuggestionsPk pk, SavedPredefinedStrategiesSuggestions dto) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Deletes a single row in the savedpredefinedstrategiessuggestions table.
	 */
	public void delete(SavedPredefinedStrategiesSuggestionsPk pk) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Returns the rows from the savedpredefinedstrategiessuggestions table that matches the specified primary-key value.
	 */
	public SavedPredefinedStrategiesSuggestions findByPrimaryKey(SavedPredefinedStrategiesSuggestionsPk pk) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Returns all rows from the savedpredefinedstrategiessuggestions table that match the criteria 'id = :id'.
	 */
	public SavedPredefinedStrategiesSuggestions findByPrimaryKey(int id) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Returns all rows from the savedpredefinedstrategiessuggestions table that match the criteria ''.
	 */
	public SavedPredefinedStrategiesSuggestions[] findAll() throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Returns all rows from the savedpredefinedstrategiessuggestions table that match the criteria 'id = :id'.
	 */
	public SavedPredefinedStrategiesSuggestions[] findWhereIdEquals(int id) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Returns all rows from the savedpredefinedstrategiessuggestions table that match the criteria 'savedpredefinedstrategiesid = :savedpredefinedstrategiesid'.
	 */
	public SavedPredefinedStrategiesSuggestions[] findWhereSavedpredefinedstrategiesidEquals(int savedpredefinedstrategiesid) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Returns all rows from the savedpredefinedstrategiessuggestions table that match the criteria 'suggestionsXML = :suggestionsXML'.
	 */
	public SavedPredefinedStrategiesSuggestions[] findWhereSuggestionsXMLEquals(String suggestionsXML) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Returns all rows from the savedpredefinedstrategiessuggestions table that match the criteria 'suggestionsVector = :suggestionsVector'.
	 */
	public SavedPredefinedStrategiesSuggestions[] findWhereSuggestionsVectorEquals(String suggestionsVector) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the savedpredefinedstrategiessuggestions table that match the specified arbitrary SQL statement
	 */
	public SavedPredefinedStrategiesSuggestions[] findByDynamicSelect(String sql, Object[] sqlParams) throws SavedPredefinedStrategiesSuggestionsDaoException;

	/** 
	 * Returns all rows from the savedpredefinedstrategiessuggestions table that match the specified arbitrary SQL statement
	 */
	public SavedPredefinedStrategiesSuggestions[] findByDynamicWhere(String sql, Object[] sqlParams) throws SavedPredefinedStrategiesSuggestionsDaoException;

}
