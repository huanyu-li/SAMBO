/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package se.liu.ida.sambo.dao;

import se.liu.ida.sambo.dto.*;
import se.liu.ida.sambo.exceptions.*;

public interface StrategiesDao
{
	/** 
	 * Inserts a new row in the strategies table.
	 */
	public StrategiesPk insert(Strategies dto) throws StrategiesDaoException;

	/** 
	 * Updates a single row in the strategies table.
	 */
	public void update(StrategiesPk pk, Strategies dto) throws StrategiesDaoException;

	/** 
	 * Deletes a single row in the strategies table.
	 */
	public void delete(StrategiesPk pk) throws StrategiesDaoException;

	/** 
	 * Returns the rows from the strategies table that matches the specified primary-key value.
	 */
	public Strategies findByPrimaryKey(StrategiesPk pk) throws StrategiesDaoException;

	/** 
	 * Returns all rows from the strategies table that match the criteria 'Id = :id'.
	 */
	public Strategies findByPrimaryKey(int id) throws StrategiesDaoException;

	/** 
	 * Returns all rows from the strategies table that match the criteria ''.
	 */
	public Strategies[] findAll() throws StrategiesDaoException;

	/** 
	 * Returns all rows from the strategies table that match the criteria 'Id = :id'.
	 */
	public Strategies[] findWhereIdEquals(int id) throws StrategiesDaoException;

	/** 
	 * Returns all rows from the strategies table that match the criteria 'TermPair1 = :termPair1'.
	 */
	public Strategies[] findWhereTermPair1Equals(String termPair1) throws StrategiesDaoException;

	/** 
	 * Returns all rows from the strategies table that match the criteria 'TermPair2 = :termPair2'.
	 */
	public Strategies[] findWhereTermPair2Equals(String termPair2) throws StrategiesDaoException;

	/** 
	 * Returns all rows from the strategies table that match the criteria 'Matchers = :matchers'.
	 */
	public Strategies[] findWhereMatchersEquals(String matchers) throws StrategiesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the strategies table that match the specified arbitrary SQL statement
	 */
	public Strategies[] findByDynamicSelect(String sql, Object[] sqlParams) throws StrategiesDaoException;

	/** 
	 * Returns all rows from the strategies table that match the specified arbitrary SQL statement
	 */
	public Strategies[] findByDynamicWhere(String sql, Object[] sqlParams) throws StrategiesDaoException;

}
