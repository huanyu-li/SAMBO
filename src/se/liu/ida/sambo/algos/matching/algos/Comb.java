/*
 * comb.java
 */

package se.liu.ida.sambo.algos.matching.algos;


/**
 *
 * @author  He Tan
 * @version
 */
public class Comb {
    
    /** Gets a combination similarity value
     * @param values a vector of similarity values
     *               generated by different matchers
     * @return the average of values
     */
    public static double average(double[] values){
        
        double value = 0;
        
        for(int i = values.length-1; i >=0 ; i --)
            value += values[i];
        
        return value/values.length;
    }
    
    
    /** Gets a combination similarity value
     * @param values a vector of similarity values
     *               generated by different matchers
     * @param weight the weights assigned to each matcher
     *               according to its expected importance
     * @return the average of values
     */
    public static double average(double[] values, double[] weights){
        
        double value = 0;
        //int num = 0;
        
        for(int i = weights.length-1; i >=0 ; i --){
            if(weights[i] != 0){
                //num ++;
                value += values[i]*weights[i];
            }
        }
        //return value/num;
        return value/WeightedSum(weights);
    }

    /*
     *  This function is used to put a normalization effect
     */
    public static double WeightedSum(double[] weights){
        double weightedSum = 0.0;
        for(int i=0; i < weights.length; i++)
        {
            weightedSum += weights[i];
        }
        return weightedSum;
    }
    
    
    /** Gets a combination similarity value
     * @param values a vector of similarity values
     *               generated by different matchers
     * @param weight the weights assigned to each matcher
     *              according to its expected importance
     *
     * @return the average of values
     */
    public static double weight(double[] values, double[] weights){
        
        double value = 0;
        int num = 0;
        
        for(int i = weights.length-1; i >=0 ; i --){
            
            if(weights[i] != 0){
                num ++;
                value += values[i]*weights[i];
            }
        }
        return value;
    }
    
    /** Gets a combination similarity value
     *
     *
     * /** Gets a combination similarity value
     * Sigmod Function //http://astronomy.swin.edu.au/~pbourke/analysis/sigmoid/
     *
     * @param values a vector of similarity values
     *               generated by different matchers
     * @param weight the weights assigned to each matcher
     *              according to its expected importance
     *
     * @return the average of values
     */
    public static double sigmod(double[] values, double[] weights){
        
        double value = 0;
        double a = 1.0 ;
        
        for(int i = values.length-1; i >=0 ; i --)
            value += weights[i]*(1/(1+ Math.pow(Math.E, -a * values[i] - 0.5)));
        
        return value;
    }
    
    
    public static double max(double[] values, double[] weights){
        
        double Max_value = 0;
        
        for(int i=0;i<values.length;i++)
        {
            double temp=values[i]*weights[i];
            if(temp>Max_value)
                Max_value=temp;
        }
        
        return Max_value;
    }
    
    
    
    public static void main(String[] args) {
        
        double[] v = {0.4, 0.333333333337, 0.4};
        double[] w = {0.5, 0.5, 0.5};
        
        System.out.println(Comb.weight(v,w)/0.81);
        
        System.out.println("Max value "+Comb.max(v,w));
    }
    
    
}
